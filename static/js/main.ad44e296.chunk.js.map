{"version":3,"sources":["foodforest_icon.PNG","Filter.js","Searchbar.js","Navbar.js","PlantInfo.js","PersonMarker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Filter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filterEdibleFruit","filterEdibleSeed","filterSummer","filterWinter","filterFall","filterSpring","handleSwitch2","bind","assertThisInitialized","handleSwitch3","handleSwitch4","handleSwitch5","handleSwitch6","handleSwitch7","setState","refilter","oneFilter","entry","columnName","add","season","filtered","Set","toConsumableArray","filter","x","has","twoFilter","concat","_this2","fruit","seed","spring","summer","fall","winter","info","keys","map","key","filterColumn","filterSeason","edible","union","intersection","size","updateFilters","_this3","react_default","a","createElement","className","reactjs_popup_es","trigger","style","color","position","modal-filter","close","onClick","Container","class","Row","Col","react_switch_default","onChange","checked","Component","Searchbar","handleChange","e","console","log","target","value","query","toLowerCase","indexOf","InputGroup","Input","placeholder","Example","toggle","isOpen","es_Navbar","light","expand","backgroundColor","NavbarBrand","href","Image_default","src","logo","alt","width","NavLink","NavbarToggler","Collapse","navbar","Nav","xs","NavItem","src_Searchbar","src_Filter_0","React","PlantInfo","modal","prevState","column","fontSize","right","plant","Modal","scrollable","centered","ModalHeader","plantInfoProp","ModalBody","displayTF","ModalFooter","Button","PersonMarker","App","plantInfo","center","lat","lng","zoom","Tabletop","init","callback","junk","tabletop","isGeolocationAvailable","isGeolocationEnabled","coords","latitude","longitude","sheets","all","point","length","items","plantColor","Navbar_Example","minHeight","id","height","lib_default","boostrapURLKeys","defaultCenter","defaultZoom","options","maps","mapTypeId","minZoom","maxZoom","restriction","latLngBounds","east","north","south","west","strictBounds","index","undefined","src_PlantInfo","src_PersonMarker","geolocated","positionOptions","enableHighAccuracy","watchPosition","userDecisionTimeout","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad44e296.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/foodforest_icon.3687f470.PNG\";","import React, { Component } from 'react'\r\nimport './Filter.css'\r\nimport Popup from \"reactjs-popup\"\r\nimport Switch from \"react-switch\"\r\nimport { Container, Row, Col } from 'reactstrap';\r\n// import Container from 'react-bootstrap/Container'\r\n// import Tabletop from 'tabletop'\r\n\r\nclass Filter extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      filterEdibleFruit: false,\r\n      filterEdibleSeed: false,\r\n      filterSummer: false,\r\n      filterWinter: false,\r\n      filterFall: false,\r\n      filterSpring: false\r\n    }\r\n    this.handleSwitch2 = this.handleSwitch2.bind(this)\r\n    this.handleSwitch3 = this.handleSwitch3.bind(this)\r\n    this.handleSwitch4 = this.handleSwitch4.bind(this)\r\n    this.handleSwitch5 = this.handleSwitch5.bind(this)\r\n    this.handleSwitch6 = this.handleSwitch6.bind(this)\r\n    this.handleSwitch7 = this.handleSwitch7.bind(this)\r\n  }\r\n\r\n  handleSwitch2(filterEdibleFruit) {\r\n    this.setState({filterEdibleFruit: filterEdibleFruit}, this.refilter)\r\n  }\r\n  handleSwitch3(filterEdibleSeed) {\r\n    this.setState({filterEdibleSeed: filterEdibleSeed}, this.refilter)\r\n  }\r\n  handleSwitch4(filterSpring) {\r\n    this.setState({filterSpring: filterSpring}, this.refilter)\r\n  }\r\n  handleSwitch5(filterSummer){\r\n    this.setState({filterSummer: filterSummer}, this.refilter)\r\n  }\r\n  handleSwitch6(filterFall) {\r\n    this.setState({filterFall: filterFall}, this.refilter)\r\n  }\r\n  handleSwitch7(filterWinter) {\r\n    this.setState({filterWinter: filterWinter}, this.refilter)\r\n  }\r\n  \r\n  filterColumn(oneFilter, entry, columnName){\r\n    if(entry[columnName] === 'FALSE'){\r\n      oneFilter.add(entry['Label'])\r\n    }\r\n  }\r\n  filterSeason(oneFilter, entry, season){\r\n    if(season !== entry['Harvest Start'] && season !== entry['Harvest End']){\r\n      oneFilter.add(entry['Label'])\r\n    }\r\n  }\r\n  intersection(filtered, oneFilter){\r\n    return new Set([...filtered].filter(x => oneFilter.has(x)))\r\n  }\r\n  union(oneFilter, twoFilter){\r\n    return new Set([...oneFilter, ...twoFilter])\r\n  }\r\n\r\n  refilter() {\r\n    var filtered = new Set()\r\n    var fruit = new Set()\r\n    var seed = new Set()\r\n    var spring = new Set()\r\n    var summer = new Set()\r\n    var fall = new Set()\r\n    var winter = new Set()\r\n    var info = this.props.info\r\n\r\n    Object.keys(info).map((key) => {\r\n      //at least one filter is true or switch is on\r\n      //if one of the edible or at least one of the seasons\r\n      if (this.state.filterEdibleFruit || this.state.filterEdibleSeed || this.state.filterSpring || this.state.filterSummer || this.state.filterFall || this.state.filterWinter){\r\n        filtered.add(info[key]['Label'])\r\n        if(this.state.filterEdibleFruit){\r\n          this.filterColumn(fruit, info[key], 'Edible (fruit) Y/N')\r\n        }\r\n        if(this.state.filterEdibleSeed){\r\n          this.filterColumn(seed, info[key], 'Edible Seed')\r\n        }\r\n        if(this.state.filterSpring){\r\n          this.filterSeason(spring, info[key], 'Spring')\r\n        }\r\n        if(this.state.filterSummer){\r\n          this.filterSeason(summer, info[key], 'Summer')\r\n        }\r\n        if(this.state.filterFall){\r\n          this.filterSeason(fall, info[key], 'Winter')\r\n        }\r\n        if(this.state.filterWinter){\r\n          this.filterSeason(winter, info[key], 'Fall')\r\n        }\r\n      }\r\n    })\r\n  //intersection of all sets that are on\r\n  // if(this.state.filterEdibleFruit){\r\n  //   filtered = this.intersection(filtered, fruit)\r\n  // }\r\n  // if(this.state.filterEdibleSeed){\r\n  //   filtered = this.intersection(filtered, seed)\r\n  // }\r\n  var edible = new Set()\r\n  if(this.state.filterEdibleFruit && this.state.filterEdibleSeed){\r\n    edible = this.union(fruit, seed)\r\n  }\r\n  else if(this.state.filterEdibleFruit){\r\n    edible = fruit\r\n  }\r\n  else if(this.state.filterEdibleSeed){\r\n    edible = seed\r\n  }\r\n  if(this.state.filterSpring){\r\n    filtered = this.intersection(filtered, spring)\r\n  }\r\n  if(this.state.filterSummer){\r\n    filtered = this.intersection(filtered, summer)\r\n  }\r\n  if(this.state.filterFall){\r\n    filtered = this.intersection(filtered, fall)\r\n  }\r\n  if(this.state.filterWinter){\r\n    filtered = this.intersection(filtered, winter)\r\n  }\r\n  if(this.state.filterSpring || this.state.filterSummer || this.state.filterFall || this.state.filterWinter && edible.size != 0){\r\n    filtered = this.union(filtered, edible)\r\n  }\r\n  else{\r\n    filtered = edible\r\n  }\r\n  \r\n  this.props.updateFilters(filtered)\r\n}\r\n\r\n\r\n  /* Loads plant information and coordinates from a google spreadsheet.\r\n   * info is stored as a map of name to information\r\n   * plantCoords is stored as a list of {name, x, y} objects\r\n   */\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Filter\">\r\n        <header className=\"Filter-header\">\r\n          <Popup \r\n            trigger={<button className=\"btn default\" style={{color: 'white'}}> Filter </button>}\r\n            position='bottom right' \r\n            modal-filter\r\n          >\r\n            {close => (\r\n              <div className=\"modal-filter\">\r\n                <a className=\"close\" onClick={close}>\r\n                  &times;\r\n                </a>\r\n                <div className=\"header\"> Filters </div>\r\n                <div className=\"grid-container\">\r\n                <Container>\r\n                <div class = \"Filter-header-header\">Edibility</div>\r\n                  <Row className=\"justify-content-md-center\">\r\n                    <Col><div className=\"item1\">Fruit</div></Col>\r\n                    <Col>\r\n                      <div className=\"item4\"><Switch onChange={this.handleSwitch2} checked={this.state.filterEdibleFruit} /></div>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"justify-content-md-center\">\r\n                    <Col><div className=\"item1\">Seed</div></Col>\r\n                    <Col>\r\n                      <div className=\"item4\"><Switch onChange={this.handleSwitch3} checked={this.state.filterEdibleSeed} /></div>\r\n                    </Col>\r\n                  </Row>\r\n                  <div className = \"season-filters\">\r\n                    <div className = \"Filter-header-header\">Harvest Season</div>\r\n                    <Row className=\"justify-content-md-center\">\r\n                      <Col>Spring</Col>\r\n                      <Col>\r\n                        <div className=\"item4\"><Switch onChange={this.handleSwitch4} checked={this.state.filterSpring} /></div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-md-center\">\r\n                      <Col>Summer</Col>\r\n                      <Col>\r\n                        <div className=\"item4\"><Switch onChange={this.handleSwitch5} checked={this.state.filterSummer} /></div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-md-center\">\r\n                      <Col>Fall</Col>\r\n                      <Col>\r\n                        <div className=\"item4\"><Switch onChange={this.handleSwitch6} checked={this.state.filterFall} /></div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-md-center\">\r\n                      <Col>Winter</Col>\r\n                      <Col>\r\n                        <div className=\"item4\"><Switch onChange={this.handleSwitch7} checked={this.state.filterWinter} /></div>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                </Container>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Popup>\r\n        </header>\r\n      </div>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default Filter\r\n","import React, { Component } from 'react';\r\nimport { InputGroup, Input } from 'reactstrap';\r\n\r\n\r\nclass Searchbar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(e){\r\n        console.log('Search: ' + e.target.value)\r\n        var info = this.props.info\r\n        var filtered = new Set()\r\n        if (e.target.value !== ''){\r\n            Object.keys(info).map((key) => {\r\n                var query = e.target.value.toLowerCase()\r\n                var plant = info[key]['Label'].toLowerCase()\r\n                if (plant.indexOf(query) < 0){\r\n                    console.log(info[key]['Label'])\r\n                    filtered.add(info[key]['Label'])\r\n                }\r\n            })\r\n        }\r\n\r\n        console.log('filter size: ' + filtered.size)\r\n        this.props.updateFilters(filtered)\r\n        \r\n    }\r\n    render() {\r\n      return (\r\n          <InputGroup>\r\n            <Input onChange={this.handleChange} style={{color:'gray', size: 'small'}} placeholder=\"Search\" />\r\n          </InputGroup>\r\n      );\r\n    };\r\n}\r\n\r\nexport default Searchbar\r\n","import React from 'react';\r\nimport Filter from './Filter.js';\r\nimport Searchbar from './Searchbar.js';\r\nimport Image from 'react-bootstrap/Image';\r\nimport logo from './foodforest_icon.PNG';\r\nimport './Navbar.css';\r\nimport { Container, Row, Col } from 'reactstrap';\r\n\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nexport default class Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"faded\" light expand=\"sm\" style={{backgroundColor: '#4B453F'}}>\r\n            <NavbarBrand href=\"/\">\r\n              <Image src= {logo} alt=\"Logo\" style={{width:150}} />\r\n            </NavbarBrand>\r\n            <NavLink href=\"https://festivalbeach.org/\" style={{color: 'white'}} >Festival Beach Website</NavLink>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n            <Container>\r\n                <Row className=\"right\">\r\n                  <Col xs={8}>\r\n                    <NavItem>\r\n                      <Searchbar info={this.props.info} updateFilters={this.props.updateFilters}/>\r\n                    </NavItem>\r\n                  </Col>\r\n                  <Col xs={2}>\r\n                    <NavItem>\r\n                      <Filter info={this.props.info} updateFilters={this.props.updateFilters} style={{color: 'white'}} />\r\n                    </NavItem>\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nclass PlantInfo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: false\r\n    };\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.setState(prevState => ({\r\n      modal: !prevState.modal\r\n    }));\r\n  }\r\n\r\n  displayTF(column) {\r\n    if(column == \"TRUE\"){\r\n      return \"Yes\";\r\n    }\r\n    else if(column == \"FALSE\"){\r\n      return \"No\";\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n   render() {\r\n    return (\r\n      <div>\r\n        <div className=\"icon\" ><i className=\"material-icons\" style={{color:this.props.color}}onClick={this.toggle}>local_florist</i></div>\r\n        <icon>\r\n          <div style={{color: 'white', fontSize: '.8em', position: 'relative', right: '2px'}}>{this.props.plant}</div>\r\n        </icon>\r\n        <Modal scrollable isOpen={this.state.modal} toggle={this.toggle} className={this.props.className} centered = \"true\">\r\n          <ModalHeader \r\n            style={{backgroundColor: ((this.props.plantInfoProp['Bloom Color'] == \"\" || this.props.plantInfoProp['Bloom Color'] == \"White\") ? \"#A4D65E\" : this.props.plantInfoProp['Bloom Color'])}} \r\n            toggle={this.toggle}>\r\n              <font size=\"5\">{this.props.plant}</font><br />\r\n              <font size=\"3\">{this.props.plantInfoProp['Family']} {this.props.plantInfoProp['Genus']} {this.props.plantInfoProp['Species']}</font>\r\n          </ModalHeader>\r\n          <ModalBody>\r\n              Harvest Start: {this.props.plantInfoProp['Harvest Start']} <br />\r\n              Harvest End: {this.props.plantInfoProp['Harvest End']} <br />\r\n              <hr color = \"black\" width = \"90%\"></hr>\r\n              Fruit Edibility: {this.displayTF(this.props.plantInfoProp['Edible (fruit) Y/N'])} <br />\r\n              Flower Edibility: {this.displayTF(this.props.plantInfoProp['Edible Flower  Y/N'])} <br />\r\n              Leaf Edibility: {this.displayTF(this.props.plantInfoProp['Edible Leaf'])} <br />\r\n              Bark Edibility: {this.displayTF(this.props.plantInfoProp['Edible Bark Y/N'])} <br />\r\n              Seed Edibility: {this.displayTF(this.props.plantInfoProp['Edible Seed'])} <br />\r\n              Overall Toxicity Rating (1-4): {this.props.plantInfoProp['Toxicity (Rating: 1-4)']} <br />\r\n              Fruit Type: {this.props.plantInfoProp['Fruit Type']} <br />\r\n              Bloom Color: {this.props.plantInfoProp['Bloom Color']} <br />\r\n              Water Use: {this.props.plantInfoProp['Water Use']} <br />\r\n          </ModalBody>\r\n          <ModalFooter style={{backgroundColor: ((this.props.plantInfoProp['Bloom Color'] == \"\" || this.props.plantInfoProp['Bloom Color'] == \"White\") ? \"#A4D65E\" : this.props.plantInfoProp['Bloom Color'])}}>\r\n            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlantInfo;\r\n","import React from 'react';\r\n\r\nclass PersonMarker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n   render() {\r\n    return (\r\n      <div>\r\n        <div className=\"icon\" ><i className=\"material-icons\" style={{color: '#EE2737'}}>accessibility</i></div>\r\n        <icon >\r\n          <div style={{color: 'white', size: '5em', position: 'relative'}}>YOU ARE HERE</div>\r\n        </icon>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PersonMarker;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Navbar from './Navbar.js'\r\nimport PlantInfo from './PlantInfo.js'\r\nimport PersonMarker from './PersonMarker.js'\r\nimport Tabletop from 'tabletop';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { geolocated } from 'react-geolocated';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      plantInfo: [],\r\n      filtered: new Set(),\r\n      center: {\r\n        lat: 30.2532,\r\n        lng: -97.7353\r\n      },\r\n      zoom: 20\r\n    }\r\n  }\r\n\r\n  /* Loads plant information and coordinates from a google spreadsheet.\r\n   * plantInfo is stored as a map of name to information\r\n   * plantCoords is stored as a list of {name, x, y} objects\r\n   */\r\n  componentDidMount() {\r\n    Tabletop.init({\r\n      key: '1_sQkoLJtMppKImYY5A7G06NqK1DrAZ9hGd596GKImFk',\r\n      callback: (junk, tabletop) => {\r\n        if (this.props.isGeolocationAvailable && this.props.isGeolocationEnabled && this.props.coords) {\r\n          var lat = this.props.coords.latitude;\r\n          var lng = this.props.coords.longitude;\r\n          if (lat >= 30.2525 && lat <= 30.2535 && lng >= -97.736 && lng <= -97.734) {\r\n            this.setState({center: {lat: lat, lng: lng}, zoom: 20});\r\n          }\r\n        }\r\n        this.setState({plantInfo: tabletop.sheets('Plant_Information').all().filter(point => point['Label'].length > 0)});\r\n      }\r\n    });\r\n  }\r\n\r\n  updateFilters(items) {\r\n    this.setState({filtered: items});\r\n  }\r\n\r\n  render() {\r\n    if (Object.keys(this.state.plantInfo).length === 0) {\r\n      return (<p>Loading...</p>);\r\n    }\r\n    else {\r\n      console.log(this.state.center.lat);\r\n      console.log(this.state.center.lng);\r\n      var plantInfo = this.state.plantInfo;\r\n      var plantColor = null;\r\n      return (\r\n        <div className=\"App\">\r\n          <Navbar info={this.state.plantInfo} updateFilters={this.updateFilters.bind(this)}/>\r\n          <header className=\"App-header\" style={{minHeight: '0'}}>\r\n            <div id=\"map\" style={{width: '100%', height: '100vh'}}>\r\n              <GoogleMapReact\r\n                boostrapURLKeys={{key: 'AIzaSyBgw60HMTK35v3C-sRyLliDj6tNV-m2zlI'}}\r\n                defaultCenter={this.state.center}\r\n                defaultZoom={this.state.zoom}\r\n                options={function (maps) { return { mapTypeId: \"satellite\", minZoom: 19, maxZoom: 20, restriction: {\r\n                  latLngBounds: {\r\n                    east: -97.734,\r\n                    north: 30.2535,\r\n                    south: 30.2525,\r\n                    west: -97.736\r\n                  },\r\n                  strictBounds: true\r\n                }}}}>\r\n                {Object.keys(plantInfo).map((index) => {\r\n                  if (plantInfo[index]['Toxicity (Rating: 1-4)'] !== undefined){\r\n                    if (plantInfo[index]['Toxicity (Rating: 1-4)'] === \"1 - Safe to eat. Enjoy!\" ){\r\n                      plantColor = \"#93C054\";\r\n                    }\r\n                    else if (plantInfo[index]['Toxicity (Rating: 1-4)'] === \"2 - May need some processing.\"){\r\n                      plantColor = \"#F68D2E\";\r\n                    }\r\n                    else {\r\n                      plantColor = \"#EE2737\";\r\n                    }\r\n                  }\r\n                  if (!this.state.filtered.has(plantInfo[index]['Label']) && plantInfo[index]['Latitude'] !== undefined && plantInfo[index]['Longitude'] !== undefined) {\r\n                    return <PlantInfo\r\n                      plant={plantInfo[index]['Label']}\r\n                      lat={plantInfo[index]['Latitude']}\r\n                      lng={plantInfo[index]['Longitude']}\r\n                      color={plantColor}\r\n                      plantInfoProp={plantInfo[index]}\r\n                    />\r\n                  }\r\n                })}\r\n                {this.props.coords !== null &&\r\n                  <PersonMarker\r\n                    lat={this.props.coords.latitude}\r\n                    lng={this.props.coords.longitude}\r\n                  />\r\n                }\r\n              </GoogleMapReact>\r\n            </div>\r\n          </header>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default geolocated({\r\n  positionOptions: {\r\n    enableHighAccuracy: false,\r\n  },\r\n  watchPosition: true,\r\n  userDecisionTimeout: 5000,\r\n})(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}